name: Run Tests

on:
  workflow_dispatch:

jobs:

  build:

    # Exclusions cannot take arrays: https://github.com/orgs/community/discussions/7835

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-15]
        dotnet: ['8.x:ga', '8.x:preview', '9.0.1xx:ga', '9.0.2xx:preview', '9.0.x:preview']
        project-type: ['console', 'maui', 'maui-blazor', 'mvc', 'razor', 'blazor', 'blazorwasm', 'winforms', 'wpf'] # dotnet new list
        configuration: [Debug]
        exclude:
          - project-type: winforms # N/A
            os: ubuntu-latest
          - project-type: winforms # N/A
            os: macos-15
          - project-type: wpf # N/A
            os: ubuntu-latest
          - project-type: wpf # N/A
            os: macos-15
      fail-fast: false # Don't stop other jobs if one fails.

    timeout-minutes: 60

    runs-on: ${{ matrix.os }}  # For a list of available runner types, refer to
                               # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      IS_POSTSHARP_OWNED: true
      TEAMCITY_CLOUD_TOKEN: ${{ secrets.TEAMCITY_CLOUD_TOKEN }}
      ConsoleAnsi: ${{ (matrix.os == 'ubuntu-latest' || matrix.os == 'macos-15') && 'No' || 'Detect' }} # https://github.com/orgs/community/discussions/136868
      MetalamaAssemblyLocatorHooksDirectory: '../..'
    #  METALAMA_TEMP: ${{ (matrix.os == 'ubuntu-latest' || matrix.os == 'macos-15') && '/tmp' || '' }}
    #  METALAMA_DIAGNOSTICS: '{"logging": {"processes": {"BackstageWorker": false,"DevEnv": false,"LinqPad": false,"TestHost": false,"RoslynCodeAnalysisService": false,"OmniSharp": false,"Rider": false,"Other": false,"ResharperTestRunner": false,"Compiler": true,"BackstageDesktopWindows": false,"VisualStudioMac": false,"LanguageServer": false,"CodeLensService": false,"DotNetTool": false},"trace": {"*": true},"stopLoggingAfterHours": 2.0},"debugging": {"processes": {"BackstageWorker": false,"DevEnv": false,"LinqPad": false,"TestHost": false,"RoslynCodeAnalysisService": false,"OmniSharp": false,"Rider": false,"Other": false,"ResharperTestRunner": false,"Compiler": false,"BackstageDesktopWindows": false,"VisualStudioMac": false,"LanguageServer": false,"CodeLensService": false,"DotNetTool": false}},"crashDumps": {"processes": {"BackstageWorker": false,"DevEnv": false,"LinqPad": false,"TestHost": false,"RoslynCodeAnalysisService": false,"OmniSharp": false,"Rider": false,"Other": false,"ResharperTestRunner": false,"Compiler": false,"BackstageDesktopWindows": false,"VisualStudioMac": false,"LanguageServer": false,"CodeLensService": false,"DotNetTool": false},"exceptionTypes": ["*"]},"profiling": {"kind": "performance","processes": {"BackstageWorker": false,"DevEnv": false,"LinqPad": false,"TestHost": false,"RoslynCodeAnalysisService": false,"OmniSharp": false,"Rider": false,"Other": false,"ResharperTestRunner": false,"Compiler": false,"BackstageDesktopWindows": false,"VisualStudioMac": false,"LanguageServer": false,"CodeLensService": false,"DotNetTool": false}}}'

    steps:

    - name: Parse .NET version and quality
      id: parse-dotnet
      shell: pwsh
      run: |
        $parts = "${{ matrix.dotnet }}" -split ":"
        "dotnet-version=$($parts[0])" >> $env:GITHUB_OUTPUT
        "dotnet-quality=$($parts[1])" >> $env:GITHUB_OUTPUT

    - name: Restore build cache
      id: cache-build
      uses: actions/cache@v4
      with:
        path: |
          ./.build-cache
        key: build-${{ matrix.os }}-${{ steps.parse-dotnet.outputs.dotnet-version }}-${{ steps.parse-dotnet.outputs.dotnet-quality }}${{ matrix.project-type }}-${{ matrix.configuration }}

    - name: Stop if build cache hit
      if: steps.cache-build.outputs.cache-hit == 'true'
      run: |
        echo "Build cache hit, skipping build."
        exit 0


    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

   

    - name: Install .NET For The Test
      uses: actions/setup-dotnet@v4
      id: setup-dotnet
      with:
        dotnet-version: ${{ steps.parse-dotnet.outputs.version }}
        dotnet-quality: ${{ steps.parse-dotnet.outputs.quality }}

    - name: Install .NET For Engineering
      uses: actions/setup-dotnet@v4
      id: setup-dotnet-eng
      with:
        dotnet-version: 9.0.200

    - name: Configure the dependency to Metalama
      shell: pwsh
      run: ./Build.ps1 dependencies set BuildServer Metalama --branch ${{github.ref_name}} --nologo

    - name: Set the .NET SDK Version
      shell: pwsh
      run: ./Build.ps1 set-sdk-version ${{ steps.setup-dotnet.outputs.dotnet-version }} --nologo

    - name: Install Java
      if: matrix.project-type == 'maui' || matrix.project-type == 'maui-blazor'
      uses: actions/setup-java@v4
      with:
        distribution: 'microsoft'
        java-version: ${{ matrix.dotnet-version == '6.0.4xx' && '11' || '17' }} # error XA0030: Building with JDK version `21.0.2` is not supported. Please install JDK version `11.0`.

    - name: Install Android SDK
      if: (matrix.project-type == 'maui' || matrix.project-type == 'maui-blazor') && (matrix.os == 'ubuntu-latest' || matrix.os == 'macos-15')
      uses: android-actions/setup-android@v3
      with:
          cmdline-tools-version: ${{ matrix.dotnet-version == '6.0.4xx' && '9862592' || '10406996' }} # Based on the Java version installed above. See https://github.com/android-actions/setup-android?tab=readme-ov-file#sdk-version-selection
  
    - name: Install Android SDK Tools
      if: (matrix.project-type == 'maui' || matrix.project-type == 'maui-blazor') && matrix.os == 'macos-15'
      run: sdkmanager "build-tools;32.0.0" "platforms;android-34"

    - name: Install .NET Workloads
      if: matrix.project-type == 'maui' || matrix.project-type == 'maui-blazor'
      shell: pwsh
      run: dotnet workload install ${{ matrix.os == 'windows-latest' && 'maui' || 'maui-android' }}${{ matrix.os == 'macos-15' && ' && dotnet workload install maui-ios && dotnet workload install maui-maccatalyst' || '' }}

    - name: Set ref version for Assembly Locator
      shell: pwsh
      run: ./Build.ps1 set-ref-version ${{ steps.setup-dotnet.outputs.dotnet-version }} --nologo

    - name: Create Project
      shell: pwsh
      run: ./Build.ps1 create-project ${{ matrix.project-type }} --nologo

    - name: Build
      shell: pwsh
      run: ./Build.ps1 build --nologo

    - name: Verify Transformations
      shell: pwsh
      run: ./Build.ps1 verify-transformations --nologo

    # Create build cache marker file
    - name: Mark build cache as successful
      run: echo Success > ./.build-cache

    # Save build cache after successful build
    - name: Save build cache
      if: success()
      uses: actions/cache/save@v4
      with:
        path: ./.build-cache
        key: build-${{ matrix.os }}-${{ steps.parse-dotnet.outputs.dotnet-version }}-${{ steps.parse-dotnet.outputs.dotnet-quality }}${{ matrix.project-type }}-${{ matrix.configuration }}

    # - name: Print crash reports
    #   if: always()
    #   run: find /tmp/Metalama/CrashReports/* -type f -exec sh -c 'echo "===== {} ====="; cat {}; echo ""' \;
